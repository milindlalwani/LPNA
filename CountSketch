import random
import math
import numpy as np
import numpy.linalg as la
import scipy.sparse as sp


# 4-wise and 2-wise independent hash functions
# Following notes at https://en.wikipedia.org/wiki/K-independent_hashing#Polynomials_with_random_coefficients

p = 2564217863 # A large, random prime number
k_4 = np.random.randint(-2**31, 2**31, 4)
k_2 = np.random.randint(-2**31, 2**31, 2)

def kwise_hash(k, x):
    return np.polyval(k, x) % p

def h(x, k):
    return kwise_hash(k_2, x) % k

def s(x):
    i = (kwise_hash(k_4, x) % 2)
    return [1., -1.][i]

def generate_count_sketch(k, n):
    S = np.zeros((k, n))
    for col in range(n):
        row = h(col, k)
        S[row, col] = s(col)
    return S
    
def embedding_matrix(A, m, n): 
    random_vector = [random.randrange(-math.inf, math.inf) for i in range(n)]
    random_embedding_matrix = [m][n]
    for i in range(m): 
        for j in range(n): 
            random_embedding_matrix[i][j] = random.randrange(-math.inf, math.inf)


sketch_sizes = [50, 100, 150, 200, 250, 300]
A = np.random.rand(m,n)
b = np.random.rand(m)

def lstsq_residual(A, x, b):
    """
    return the residual norm, ||Ax-b||_2.
    """
    # TODO: implementation here
    #Returning the residual vector: Ax - b: 
    product = A @ x
    res = None
    if(product.shape == b.shape): 
        res = product - b
    return np.linalg.norm(res)

def sketch_lstsq(S, A, b):
    """
    Solve the sketched least squares problem
    inputs
    ------
    S: an embedding matrix
    A: an input matrix with size m x n 
    b: an input vector with size m
    outputs:
    a vector x such that x = argmin_x||SAx-Sb||_2.
    """
    # TODO: implementation here,
    # You can form A2 = SA and b2 = Sb, and call lstsq(A2, b2).
    A2 = S @ A
    B2 = S @ b
    return lstsq(A2, B2)
    
sketch_sizes = [50, 100, 150, 200, 250, 300]
A = np.random.rand(m,n)
b = np.random.rand(m)
x = lstsq(A, b)
error = lstsq_residual(A, x, b)
print("error is", error)
for s in sketch_sizes:
    S = embedding_builder(s, m)
    x = sketch_lstsq(S, A, b)
    error = lstsq_residual(A, x, b)
    print("sketching error with sketch size ", s, " is", error)
